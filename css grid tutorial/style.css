/* Basic styling for the page */
/*Ensures a clean and readable font.
Makes the page take full viewport height (100vh).
Sets a grey background for contrast.
Removes default margins.*/
body {
    font-family: Arial, sans-serif; /* Sets a clean, readable font */
    height: 100vh; /* Makes the container take the full height of the viewport */
    background-color: grey; /* Light background for contrast */
    margin: 0;
}

/* Grid container styling */
.container {
    display: grid; /* Enables CSS Grid */
    /*they work by defining a track for each value that you pass */
   /* grid-template-rows: 100px 100px ;*//* Creates responsive rows of 100px */
   /*grid-template-rows:repeat(2,100px) ;*//*repeat(no of times u want to repeat,value u want to repeat*/
    /*grid-template-columns: 100px 100px 100px 100px 100px 100px; */ /* Creates responsive columns of 100px */
    /*grid-template-columns: 1fr 3fr 1fr;*//*1 fr represents fractional unit value of availbale space*/
    /*grid-template-columns: 100px 3fr 1fr;*/
    /*grid-template-columns: 100px minmax(100px,3fr) 1fr;*//* minmax(min size,max size)*/
   /* grid-gap: 1em;*//*for gaps both row and col*/
   /*grid-template-rows:100px 300px 100px ;
   grid-template-columns: 1fr 3fr;
   grid-template-areas: 
   'header header '
   'main aside'
   'footer footer';*//*each set of '' is no of rows and inside there are no of cols*/
    /*grid-gap: 1em 3em;*//*1st row ,2nd col*/
   /*grid-template-rows: repeat(2,100px);
    grid-template-columns: repeat(2,100px);
    we can use justify-content and align-content for alignment of grid and alignment of content
    justify-content:start;aligns along row axis
    align-content:start;aligns along col axis*/
    grid-template-rows: repeat(4,100px);
    grid-template-columns: repeat(auto-fit,minmax(100px,1fr));/*auto fit makes it media responsive by 
    wrapping grids when necessary*/
    padding: 20px; /* Adds some space around the grid */
    background: white; /* White background for contrast */
    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.1); /* Light shadow effect */
    border-radius: 8px; /* Soft rounded corners */
    border: 2px solid black; /* Add visible borders */
    /*grid-auto-rows: 100px;*//*sets sizes for implicit grid(our implicit rows has a row of 100px) we can also do for columns*/
   /* grid-auto-flow: column;*//*we can change the auto flow to anything that what is set by deafult*/
}
/* Show grid lines using outline */
.container {
    outline: 2px dashed red; /* Dashed border around the whole grid */
}
/*.item1{
    justify-self: center;*overwrite row alignment of item1
    align-self: stretch;overwrite col alignment of item1
}*/
/*.item1{
    grid-area: header;
}
.item2{
    grid-area: main;
}
.item3{
    grid-area: aside;
}
.item4{
    grid-area: footer;
}*/
/*
.item1{
    grid-row-start: 1;
    grid-row-end: 3;
    grid-column-start: 1;
    grid-column-end: 5;
    or 
    grid-row: 1/3;
    grid-column: 1/7;
}*/
/*
.item2{
     grid-row: 1/3;
     grid-column: 5/7;
     or 
    grid-row: span 2; spanning the no of cells currently 
     grid-column: span 2;
     grid-area:2/4/4/6;
     z-index: 1;
 }*/
 /*
 .item3{
    grid-area: row-start col-start row-end col-end;
    grid-area: 3/1/7/7;
    or
    grid-area:3/1/-1/-1;same as  3/1/7/7
 }
 */
/* Box styling for grid items */
.container > div {
    background-color: #3498db; /* Blue color for boxes */
    color: white; /* White text */
    display: flex;
    justify-content: center; /* Centers text inside */
    align-items: center;
    height: 100px; /* Fixed height for each box */
    font-size: 1.2rem; /* Slightly larger text */
    font-weight: bold;
    border-radius: 5px; /* Rounded corners for the boxes */
    box-shadow: 2px 4px 6px rgba(0, 0, 0, 0.2); /* Slight shadow effect */
    transition: transform 0.3s ease-in-out; /* Smooth animation on hover */
}

/* Hover effect */
.container > div:hover {
    transform: scale(1.05); /* Slight zoom effect on hover */
    background-color: #2980b9; /* Darker blue on hover */
}

/*
Here’s a well-structured explanation for CSS Grid:  

# ** CSS Grid Notes**

## **1. What is CSS Grid?**
CSS Grid is a **two-dimensional layout system** that allows you to arrange items in rows and columns.

- **Flexible and responsive**
- **Better control over layout**
- **Easier alignment of elements**

---

## **2. Enabling Grid**
```css
.container {
    display: grid;
}
```
- Turns the container into a **grid**.

---

## **3. Defining Rows & Columns**
### **📍 grid-template-rows & grid-template-columns**
```css
.container {
    display: grid;
    grid-template-rows: 100px 200px 100px; (* 3 rows of different heights *)
    grid-template-columns: 1fr 2fr 1fr;  3 columns (fractions of available space) 
}
```
- **Rows**: `100px 200px 100px` → 3 rows, fixed height.
- **Columns**: `1fr 2fr 1fr` → Responsive columns.

**💡 Shorthand**
```css
grid-template: 100px 200px 100px / 1fr 2fr 1fr;
```
*(First part: rows, second part: columns)*

---

## **4. Auto-Sizing Grid Items**
### **📍 repeat()**
```css
grid-template-columns: repeat(3, 200px);  3 equal columns of 200px each 
grid-template-rows: repeat(2, 150px); 2 rows of 150px each 
```

### **📍 minmax()**
```css
grid-template-columns: repeat(3, minmax(100px, 1fr));
```
- **Prevents items from becoming too small** (min size = `100px`, max size = `1fr`).

---

## **5. Implicit & Explicit Grid**
- **Explicit Grid** → Defined using `grid-template-rows` & `grid-template-columns`.
- **Implicit Grid** → Extra rows/columns created automatically.
  
```css
grid-auto-rows: 100px;  Sets size for implicit rows 
grid-auto-columns: 100px;  Sets size for implicit columns 
```

---

## **6. Grid Gaps (Spacing)**
```css
grid-gap: 10px;  Both row & column gap 
grid-row-gap: 10px;  Only row gap 
grid-column-gap: 20px;  Only column gap 
```

---

## **7. Grid Alignment**
### **📍 Aligning the whole grid**
```css
justify-content: center;  Aligns grid along horizontal axis 
align-content: center;  Aligns grid along vertical axis 
```
Values: `start | end | center | space-around | space-between | space-evenly`

### **📍 Aligning individual items**
```css
.item1 {
    justify-self: center;  Centers item horizontally 
    align-self: stretch; Stretches item vertically 
}
```

---

## **8. Grid Areas (Named Layouts)**
### **📍 Defining Grid Areas**
```css
.container {
    display: grid;
    grid-template-areas: 
        "header header"
        "main aside"
        "footer footer";
}
.item1 { grid-area: header; }
.item2 { grid-area: main; }
.item3 { grid-area: aside; }
.item4 { grid-area: footer; }
```
- Allows **naming sections** for better readability.

---

## **9. Positioning Grid Items**
### **📍 grid-column & grid-row**
```css
.item1 {
    grid-column: 1 / 3;  Starts at column 1, ends at column 3 
    grid-row: 1 / 3; Starts at row 1, ends at row 3 
}
```
### **📍 span Keyword**
```css
.item2 {
    grid-column: span 2;  Spans across 2 columns 
    grid-row: span 2; Spans across 2 rows 
}
```

---

## **10. Auto Placement**
### **📍 grid-auto-flow**
```css
grid-auto-flow: row; Default: places items row by row 
grid-auto-flow: column;  Places items column by column 
```

---

## **11. Responsive Grid with `auto-fit` & `auto-fill`**
```css
grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
```
- **auto-fit**: Shrinks columns to fit the container.
- **auto-fill**: Fills available space with empty columns.

---

## **12. Adding Hover Effects**
```css
.container > div:hover {
    transform: scale(1.05);
    background-color: #2980b9;
}

*/